/* soapServicesSoapBindingProxy.h
   Generated by gSOAP 2.7.17 from shopinterface.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapServicesSoapBindingProxy_H
#define soapServicesSoapBindingProxy_H
#include "soapH.h"


//byliu
//#include "common.h"
//extern SipInfo  usrAuth; //用户信息

class ServicesSoapBinding
{   
	public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'ServicesSoapBinding' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	ServicesSoapBinding(char *ret)
	{
		soap = soap_new();
		
		endpoint=ret;
		//byliu这一行被我注掉
		//endpoint = "http://192.168.0.174:88/OAapp/WebObjects/OAapp.woa/ws/Services"; 
		if (soap && !soap->namespaces)
		{
			static const struct Namespace namespaces[] = {
				{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
				{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
				{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
				{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
				{"ns1", "http://xml.apache.org/axis/wsdd/", NULL, NULL},
				{NULL, NULL, NULL, NULL}
			};
			soap->namespaces = namespaces; 
		}
	};
	/// Destructor frees deserialized data and soap engine context
	virtual ~ServicesSoapBinding() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'updateProducts' of service 'ServicesSoapBinding' and return error code (or SOAP_OK)
	virtual int ns1__updateProducts(char *_pwd, char *_xmlDoc, char *&_updateProductsReturn) { return soap ? soap_call_ns1__updateProducts(soap, endpoint, NULL, _pwd, _xmlDoc, _updateProductsReturn) : SOAP_EOM; };
	/// Invoke 'updateClasses' of service 'ServicesSoapBinding' and return error code (or SOAP_OK)
	virtual int ns1__updateClasses(char *_pwd, char *_xmlDoc, char *&_updateClassesReturn) { return soap ? soap_call_ns1__updateClasses(soap, endpoint, NULL, _pwd, _xmlDoc, _updateClassesReturn) : SOAP_EOM; };
	/// Invoke 'updateStock' of service 'ServicesSoapBinding' and return error code (or SOAP_OK)
	virtual int ns1__updateStock(char *_pwd, char *_xmlDoc, char *&_updateStockReturn) { return soap ? soap_call_ns1__updateStock(soap, endpoint, NULL, _pwd, _xmlDoc, _updateStockReturn) : SOAP_EOM; };
	/// Invoke 'getOrders' of service 'ServicesSoapBinding' and return error code (or SOAP_OK)
	virtual int ns1__getOrders(char *_pwd, char *&_getOrdersReturn) { return soap ? soap_call_ns1__getOrders(soap, endpoint, NULL, _pwd, _getOrdersReturn) : SOAP_EOM; };
	/// Invoke 'getOrder' of service 'ServicesSoapBinding' and return error code (or SOAP_OK)
	virtual int ns1__getOrder(char *_pwd, char *_xmlDoc, char *&_getOrderReturn) { return soap ? soap_call_ns1__getOrder(soap, endpoint, NULL, _pwd, _xmlDoc, _getOrderReturn) : SOAP_EOM; };
	/// Invoke 'updateOrdersRead' of service 'ServicesSoapBinding' and return error code (or SOAP_OK)
	virtual int ns1__updateOrdersRead(char *_pwd, char *_xmlDoc, char *&_updateOrdersReadReturn) { return soap ? soap_call_ns1__updateOrdersRead(soap, endpoint, NULL, _pwd, _xmlDoc, _updateOrdersReadReturn) : SOAP_EOM; };
};
#endif

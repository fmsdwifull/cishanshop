// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* shopinterface.h
   Generated by wsdl2h 1.2.17 from http://10.10.100.48:88/OAapp/WebObjects/OAapp.woa/ws/Services?wsdl and typemap.dat
   2014-12-09 03:49:06 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on shopinterface.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://xml.apache.org/axis/wsdd/                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	ServicesSoapBinding 
//gsoap ns1  service type:	Services 
//gsoap ns1  service port:	http://10.10.100.48:88/OAapp/WebObjects/OAapp.woa/ws/Services 
//gsoap ns1  service namespace:	http://xml.apache.org/axis/wsdd/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref ServicesSoapBinding

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ServicesSoapBinding Binding "ServicesSoapBinding"

@section ServicesSoapBinding_operations Operations of Binding  "ServicesSoapBinding"

  - @ref ns1__updateProducts

  - @ref ns1__updateClasses

  - @ref ns1__updateStock

  - @ref ns1__getOrders

  - @ref ns1__getOrder

  - @ref ns1__updateOrdersRead

@section ServicesSoapBinding_ports Endpoints of Binding  "ServicesSoapBinding"

  - http://10.10.100.48:88/OAapp/WebObjects/OAapp.woa/ws/Services

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ServicesSoapBinding                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__updateProducts                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__updateProducts" of service binding "ServicesSoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__updateProducts(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               pwd,
    char*                               xmlDoc,
    // response parameters:
    char*                              &_updateProductsReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__updateProducts(
    struct soap *soap,
    // request parameters:
    char*                               pwd,
    char*                               xmlDoc,
    // response parameters:
    char*                              &_updateProductsReturn
  );
@endcode

C++ proxy class (defined in soapServicesSoapBindingProxy.h):
@code
  class ServicesSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServicesSoapBindingService.h):
@code
  class ServicesSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	updateProducts rpc
//gsoap ns1  service method-encoding:	updateProducts http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	updateProducts ""
int ns1__updateProducts(
    char*                               _pwd,	///< Request parameter
    char*                               _xmlDoc,	///< Request parameter
    char*                              &_updateProductsReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__updateClasses                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__updateClasses" of service binding "ServicesSoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__updateClasses(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               pwd,
    char*                               xmlDoc,
    // response parameters:
    char*                              &_updateClassesReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__updateClasses(
    struct soap *soap,
    // request parameters:
    char*                               pwd,
    char*                               xmlDoc,
    // response parameters:
    char*                              &_updateClassesReturn
  );
@endcode

C++ proxy class (defined in soapServicesSoapBindingProxy.h):
@code
  class ServicesSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServicesSoapBindingService.h):
@code
  class ServicesSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	updateClasses rpc
//gsoap ns1  service method-encoding:	updateClasses http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	updateClasses ""
int ns1__updateClasses(
    char*                               _pwd,	///< Request parameter
    char*                               _xmlDoc,	///< Request parameter
    char*                              &_updateClassesReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__updateStock                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__updateStock" of service binding "ServicesSoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__updateStock(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               pwd,
    char*                               xmlDoc,
    // response parameters:
    char*                              &_updateStockReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__updateStock(
    struct soap *soap,
    // request parameters:
    char*                               pwd,
    char*                               xmlDoc,
    // response parameters:
    char*                              &_updateStockReturn
  );
@endcode

C++ proxy class (defined in soapServicesSoapBindingProxy.h):
@code
  class ServicesSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServicesSoapBindingService.h):
@code
  class ServicesSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	updateStock rpc
//gsoap ns1  service method-encoding:	updateStock http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	updateStock ""
int ns1__updateStock(
    char*                               _pwd,	///< Request parameter
    char*                               _xmlDoc,	///< Request parameter
    char*                              &_updateStockReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getOrders                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__getOrders" of service binding "ServicesSoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getOrders(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               pwd,
    // response parameters:
    char*                              &_getOrdersReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getOrders(
    struct soap *soap,
    // request parameters:
    char*                               pwd,
    // response parameters:
    char*                              &_getOrdersReturn
  );
@endcode

C++ proxy class (defined in soapServicesSoapBindingProxy.h):
@code
  class ServicesSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServicesSoapBindingService.h):
@code
  class ServicesSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getOrders rpc
//gsoap ns1  service method-encoding:	getOrders http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	getOrders ""
int ns1__getOrders(
    char*                               _pwd,	///< Request parameter
    char*                              &_getOrdersReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getOrder                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__getOrder" of service binding "ServicesSoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getOrder(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               pwd,
    char*                               xmlDoc,
    // response parameters:
    char*                              &_getOrderReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getOrder(
    struct soap *soap,
    // request parameters:
    char*                               pwd,
    char*                               xmlDoc,
    // response parameters:
    char*                              &_getOrderReturn
  );
@endcode

C++ proxy class (defined in soapServicesSoapBindingProxy.h):
@code
  class ServicesSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServicesSoapBindingService.h):
@code
  class ServicesSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getOrder rpc
//gsoap ns1  service method-encoding:	getOrder http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	getOrder ""
int ns1__getOrder(
    char*                               _pwd,	///< Request parameter
    char*                               _xmlDoc,	///< Request parameter
    char*                              &_getOrderReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__updateOrdersRead                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__updateOrdersRead" of service binding "ServicesSoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__updateOrdersRead(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               pwd,
    char*                               xmlDoc,
    // response parameters:
    char*                              &_updateOrdersReadReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__updateOrdersRead(
    struct soap *soap,
    // request parameters:
    char*                               pwd,
    char*                               xmlDoc,
    // response parameters:
    char*                              &_updateOrdersReadReturn
  );
@endcode

C++ proxy class (defined in soapServicesSoapBindingProxy.h):
@code
  class ServicesSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServicesSoapBindingService.h):
@code
  class ServicesSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	updateOrdersRead rpc
//gsoap ns1  service method-encoding:	updateOrdersRead http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	updateOrdersRead ""
int ns1__updateOrdersRead(
    char*                               _pwd,	///< Request parameter
    char*                               _xmlDoc,	///< Request parameter
    char*                              &_updateOrdersReadReturn	///< Response parameter
);

/* End of shopinterface.h */

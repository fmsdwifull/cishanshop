/* soapServer.cpp
   Generated by gSOAP 2.7.17 from shopinterface.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.7.17 2014-12-09 03:50:09 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif

	do
	{
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			soap->error = SOAP_EOF;
			return soap_send_fault(soap);
		}
#endif

		soap_begin(soap);

#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif

		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(soap);
#else 
				return soap_send_fault(soap);
#endif
			}
			soap_closesock(soap);

			continue;
		}

		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap)
		 || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:updateProducts"))
		return soap_serve_ns1__updateProducts(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:updateClasses"))
		return soap_serve_ns1__updateClasses(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:updateStock"))
		return soap_serve_ns1__updateStock(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:getOrders"))
		return soap_serve_ns1__getOrders(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:getOrder"))
		return soap_serve_ns1__getOrder(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:updateOrdersRead"))
		return soap_serve_ns1__updateOrdersRead(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__updateProducts(struct soap *soap)
{	struct ns1__updateProducts soap_tmp_ns1__updateProducts;
	struct ns1__updateProductsResponse soap_tmp_ns1__updateProductsResponse;
	soap_default_ns1__updateProductsResponse(soap, &soap_tmp_ns1__updateProductsResponse);
	soap_default_ns1__updateProducts(soap, &soap_tmp_ns1__updateProducts);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__updateProducts(soap, &soap_tmp_ns1__updateProducts, "ns1:updateProducts", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__updateProducts(soap, soap_tmp_ns1__updateProducts._pwd, soap_tmp_ns1__updateProducts._xmlDoc, soap_tmp_ns1__updateProductsResponse._updateProductsReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__updateProductsResponse(soap, &soap_tmp_ns1__updateProductsResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__updateProductsResponse(soap, &soap_tmp_ns1__updateProductsResponse, "ns1:updateProductsResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__updateProductsResponse(soap, &soap_tmp_ns1__updateProductsResponse, "ns1:updateProductsResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__updateClasses(struct soap *soap)
{	struct ns1__updateClasses soap_tmp_ns1__updateClasses;
	struct ns1__updateClassesResponse soap_tmp_ns1__updateClassesResponse;
	soap_default_ns1__updateClassesResponse(soap, &soap_tmp_ns1__updateClassesResponse);
	soap_default_ns1__updateClasses(soap, &soap_tmp_ns1__updateClasses);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__updateClasses(soap, &soap_tmp_ns1__updateClasses, "ns1:updateClasses", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__updateClasses(soap, soap_tmp_ns1__updateClasses._pwd, soap_tmp_ns1__updateClasses._xmlDoc, soap_tmp_ns1__updateClassesResponse._updateClassesReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__updateClassesResponse(soap, &soap_tmp_ns1__updateClassesResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__updateClassesResponse(soap, &soap_tmp_ns1__updateClassesResponse, "ns1:updateClassesResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__updateClassesResponse(soap, &soap_tmp_ns1__updateClassesResponse, "ns1:updateClassesResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__updateStock(struct soap *soap)
{	struct ns1__updateStock soap_tmp_ns1__updateStock;
	struct ns1__updateStockResponse soap_tmp_ns1__updateStockResponse;
	soap_default_ns1__updateStockResponse(soap, &soap_tmp_ns1__updateStockResponse);
	soap_default_ns1__updateStock(soap, &soap_tmp_ns1__updateStock);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__updateStock(soap, &soap_tmp_ns1__updateStock, "ns1:updateStock", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__updateStock(soap, soap_tmp_ns1__updateStock._pwd, soap_tmp_ns1__updateStock._xmlDoc, soap_tmp_ns1__updateStockResponse._updateStockReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__updateStockResponse(soap, &soap_tmp_ns1__updateStockResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__updateStockResponse(soap, &soap_tmp_ns1__updateStockResponse, "ns1:updateStockResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__updateStockResponse(soap, &soap_tmp_ns1__updateStockResponse, "ns1:updateStockResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__getOrders(struct soap *soap)
{	struct ns1__getOrders soap_tmp_ns1__getOrders;
	struct ns1__getOrdersResponse soap_tmp_ns1__getOrdersResponse;
	soap_default_ns1__getOrdersResponse(soap, &soap_tmp_ns1__getOrdersResponse);
	soap_default_ns1__getOrders(soap, &soap_tmp_ns1__getOrders);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__getOrders(soap, &soap_tmp_ns1__getOrders, "ns1:getOrders", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__getOrders(soap, soap_tmp_ns1__getOrders._pwd, soap_tmp_ns1__getOrdersResponse._getOrdersReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__getOrdersResponse(soap, &soap_tmp_ns1__getOrdersResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getOrdersResponse(soap, &soap_tmp_ns1__getOrdersResponse, "ns1:getOrdersResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getOrdersResponse(soap, &soap_tmp_ns1__getOrdersResponse, "ns1:getOrdersResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__getOrder(struct soap *soap)
{	struct ns1__getOrder soap_tmp_ns1__getOrder;
	struct ns1__getOrderResponse soap_tmp_ns1__getOrderResponse;
	soap_default_ns1__getOrderResponse(soap, &soap_tmp_ns1__getOrderResponse);
	soap_default_ns1__getOrder(soap, &soap_tmp_ns1__getOrder);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__getOrder(soap, &soap_tmp_ns1__getOrder, "ns1:getOrder", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__getOrder(soap, soap_tmp_ns1__getOrder._pwd, soap_tmp_ns1__getOrder._xmlDoc, soap_tmp_ns1__getOrderResponse._getOrderReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__getOrderResponse(soap, &soap_tmp_ns1__getOrderResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getOrderResponse(soap, &soap_tmp_ns1__getOrderResponse, "ns1:getOrderResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getOrderResponse(soap, &soap_tmp_ns1__getOrderResponse, "ns1:getOrderResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__updateOrdersRead(struct soap *soap)
{	struct ns1__updateOrdersRead soap_tmp_ns1__updateOrdersRead;
	struct ns1__updateOrdersReadResponse soap_tmp_ns1__updateOrdersReadResponse;
	soap_default_ns1__updateOrdersReadResponse(soap, &soap_tmp_ns1__updateOrdersReadResponse);
	soap_default_ns1__updateOrdersRead(soap, &soap_tmp_ns1__updateOrdersRead);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__updateOrdersRead(soap, &soap_tmp_ns1__updateOrdersRead, "ns1:updateOrdersRead", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__updateOrdersRead(soap, soap_tmp_ns1__updateOrdersRead._pwd, soap_tmp_ns1__updateOrdersRead._xmlDoc, soap_tmp_ns1__updateOrdersReadResponse._updateOrdersReadReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__updateOrdersReadResponse(soap, &soap_tmp_ns1__updateOrdersReadResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__updateOrdersReadResponse(soap, &soap_tmp_ns1__updateOrdersReadResponse, "ns1:updateOrdersReadResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__updateOrdersReadResponse(soap, &soap_tmp_ns1__updateOrdersReadResponse, "ns1:updateOrdersReadResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
